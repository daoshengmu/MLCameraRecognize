// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 1

#include <PrismSceneManager.h>
#include <scenes.h>
#include <CameraRGN/CameraRGN.h>

namespace scenes {

  namespace CameraRGN {

    namespace externalNodes {
    }

    const SceneDescriptor::ExternalNodeReferences externalNodesMap = {
    };

    const SceneDescriptor descriptor(
      0,
      "CameraRGN",
      "root",
      "/assets/scenes/CameraRGN.scene.xml",
      "/assets/scenes/CameraRGN.scene.res.xml",
      externalNodesMap,
      true);
  }

  const SceneDescriptorReferences externalScenes = {
    {CameraRGN::descriptor.getExternalName(), CameraRGN::descriptor}
  };

  struct VerifyNumberOfExternalScenes {
    VerifyNumberOfExternalScenes() { assert(externalScenes.size() == numberOfExternalScenes); }
  };

  VerifyNumberOfExternalScenes verifyNumberOfExternalScenes;
}

const PrismSceneManager::CreateSpawnedScene PrismSceneManager::createSpawnedScene[scenes::numberOfExternalScenes] = {
  ::scenes::CameraRGN::createSpawnedScene
};

const PrismSceneManager::CreateSpawnedSceneHandlers PrismSceneManager::createSpawnedSceneHandlers[scenes::numberOfExternalScenes] = {
  static_cast<CreateSpawnedSceneHandlers>(::scenes::CameraRGN::createSpawnedSceneHandlers)
};

